// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String   @id @default(cuid())
  username     String   @unique @db.VarChar(64)
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  group        group[]
  member       member[]
  message      message[]
}

model group {
  id             String   @id @default(cuid())
  name           String   @unique @db.VarChar(64)
  description    String   @default("") @db.Text()
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  owner          user     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  invites        invite[]
  members        member[]
  messages       message[]
}

model invite {
  id             String   @id @default(cuid())
  limit          Int?     @db.SmallInt  
  inviter        member     @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId      String
  group          group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        String 
  expiresAt      DateTime? 
  createdAt      DateTime @default(now())
}

model role {
  id             String @id @default(cuid())
  color          Int?
  name           String @db.VarChar(120)
  permissions    Int    @db.SmallInt // 16 possible permissions
  member         member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       String
}

model member {
  id             String   @id @default(cuid())
  user           user     @relation(fields: [userId], references: [id])
  userId         String
  group          group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId        String
  roles          role[]
  invite         invite[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model message {
  id             String   @id @default(cuid())
  text           String   @db.Text()
  author         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group          group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  groupId        String
  userId         String
}
